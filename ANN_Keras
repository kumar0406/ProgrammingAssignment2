## ANN keras

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf

## data preprocessing

dataset = pd.read_csv('Churn_Modelling.csv')

dataset.head()

x = dataset.iloc[:, 3:13].values
y = dataset.iloc[:, 13].values

## matrix of x and y are created


x



y

## split the data into training and test

## before splitting the data we must encode categorical variables

from sklearn.preprocessing import LabelEncoder, OneHotEncoder
label_encoder_x_1 = LabelEncoder()
x[:,1] = label_encoder_x_1.fit_transform(x[:,1])

label_encoder_x_2 = LabelEncoder()
x[:,2] = label_encoder_x_2.fit_transform(x[:,2])

x

## create dummy variable
oneHotEncoder = OneHotEncoder(categorical_features=[1])
x = oneHotEncoder.fit_transform(x).toarray()

x.shape

x1 = pd.DataFrame(x)

x1.head()
## remove one dummy variable to remove the dummy variable trap

## column 0 will be removed
x1.drop(0, axis =1, inplace = True)

x1.head()

x1.shape

## now split the data into tst and train set

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(x1, y, test_size=0.2, random_state=42)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()

X_tarin = sc.fit_transform(X_train)
X_test = sc.fit_transform(X_test)

import keras

## Part 3

from keras.models import Sequential
from keras.layers import Dense

## define the sequence of layers
classifier = Sequential()



X_tarin.shape

## add the input layer and first hidden layer
classifier.add(Dense(output_dim = 6, init = 'uniform', activation= 'relu', input_dim = 11 ))


## second hidden layer
classifier.add(Dense(output_dim = 6, init = 'uniform', activation= 'relu'))



classifier.add(Dense(output_dim = 1, init = 'uniform', activation= 'sigmoid'))
## for more that 2 op we use softmax function



## compiling ANN

classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])



classifier.fit(X_tarin, y_train, batch_size= 10, epochs= 100)
